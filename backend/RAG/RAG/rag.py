import os
import asyncio
import time
import re
import logging
import requests
from sentence_transformers import SentenceTransformer
from pinecone import Pinecone
from google import genai
from google.genai import types
from flask import Flask, request, jsonify
from flask_cors import CORS
from upstash_redis import Redis
from dotenv import load_dotenv
import base64

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

async def generate_response(prompt, retrieved_docs, tone='neutral'):
    try:
        api_key = os.environ.get('GOOGLE_API_KEY')
        if not api_key:
            raise ValueError("GOOGLE_API_KEY is not set")
        client = genai.Client(api_key=api_key)
        context = "\n".join([doc['metadata']['text'] for doc in retrieved_docs])
        system_prompt = (
            "You are an empathetic Aven support agent named Aven. Acknowledge the user’s frustration and provide clear, supportive solutions."
            if tone == 'empathetic'
            else "You are a friendly Aven support agent named Aven."
        )
        full_prompt = f"{system_prompt}\n\nContext:\n{context}\n\nQuestion: {prompt}\nAnswer in a concise and clear manner:"
        contents = [types.Content(role="user", parts=[types.Part.from_text(text=full_prompt)])]
        generate_content_config = types.GenerateContentConfig(response_mime_type="text/plain")
        response = ""
        for chunk in client.models.generate_content_stream(
            model="gemini-2.0-flash",
            contents=contents,
            config=generate_content_config,
        ):
            response += chunk.text
        return response.strip()
    except Exception as e:
        # logger.error(f"Error generating response with Gemini: {str(e)}")
        return "Error generating response"

async def test_rag(prompt, top_k=3, user_id='default-user', tone='neutral'):
    sensitive_patterns = [
        r'^\d{3}-\d{2}-\d{4}$',  # SSN
        r'legal advice|lawyer|sue|court',  # Legal queries
        r'fuck|shit|damn|bitch|stupid|idiot|dumb|dumbass',  # Toxic language
    ]
    if any(re.search(pattern, prompt, re.IGNORECASE) for pattern in sensitive_patterns):
        return "I’m sorry, I can’t assist with that. Please contact Aven support directly at support@aven.com."

    try:
        model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
    except Exception as e:
        # logger.error(f"Error initializing Sentence Transformers model: {str(e)}")
        return None
    try:
        query_embedding = model.encode(prompt, show_progress_bar=False).tolist()
    except Exception as e:
        # logger.error(f"Error encoding query: {str(e)}")
        return None
    try:
        api_key = os.environ.get('PINECONE_API_KEY', 'pcsk_35ZMWD_5Q7dfwZD6UWx7UFfzvGY1dn7gDGxL5oQosr4Q3gxQ8YcdbWHjt6RCszMvusC9kh')
        if not api_key:
            raise ValueError("PINECONE_API_KEY is not set")
        pc = Pinecone(api_key=api_key)
        index_name = "aven-embeddings"
        index = pc.Index(index_name)
    except Exception as e:
        # logger.error(f"Error connecting to Pinecone: {str(e)}")
        return None
    try:
        query_results = index.query(vector=query_embedding, top_k=top_k, include_metadata=True)
        retrieved_docs = query_results['matches']
        logger.info(f"Retrieved {len(retrieved_docs)} documents:")
        for doc in retrieved_docs:
            logger.info(f"ID: {doc['id']}, Score: {doc['score']}, URL: {doc['metadata']['url']}, Title: {doc['metadata']['title']}")
    except Exception as e:
        logger.error(f"Error querying Pinecone: {str(e)}")
        return None

    try:
        redis = Redis.from_env()
        redis.ping()
        history = redis.lrange(f'user:{user_id}:history', 0, 5)
        history_context = '\n'.join([h.decode() for h in history]) if history else ''
        response = await generate_response(f"{history_context}\n\n{prompt}" if history_context else prompt, retrieved_docs, tone)
        redis.lpush(f'user:{user_id}:history', f"Q: {prompt}\nA: {response}")
        redis.close()
        return response
    except Exception as e:
        # logger.warning(f"Redis connection failed: {str(e)}. Proceeding without history.")
        response = await generate_response(prompt, retrieved_docs, tone)
        return response

@app.route('/rag', methods=['POST'])
def rag_endpoint():
    data = request.get_json()
    prompt = data.get('prompt')
    #user_id = data.get('user_id', 'default-user')
    #tone = data.get('tone', 'neutral')

    
    # Initialize the client with the API key
    client = genai.Client(api_key=os.environ.get('GOOGLE_API_KEY'))

    model = "gemini-2.0-flash-lite"

    # Define the conversation history
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_bytes(
                    mime_type="text/plain",
                    data=base64.b64decode(
                        """"""
                    ),
                ),
                #types.Part.from_text(text="""What is the company Aven about? """),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=prompt),  # Use user input here
            ],
        ),
    ]

    # Configure generation settings
    generate_content_config = types.GenerateContentConfig(
        temperature=0.55,
        top_p=0.6,
        media_resolution="MEDIA_RESOLUTION_MEDIUM",
        safety_settings=[
            types.SafetySetting(
                category="HARM_CATEGORY_HARASSMENT",
                threshold="BLOCK_ONLY_HIGH",
            ),
            types.SafetySetting(
                category="HARM_CATEGORY_HATE_SPEECH",
                threshold="BLOCK_ONLY_HIGH",
            ),
            types.SafetySetting(
                category="HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold="BLOCK_ONLY_HIGH",
            ),
            types.SafetySetting(
                category="HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold="BLOCK_ONLY_HIGH",
            ),
        ],
        system_instruction=[
            types.Part.from_text(
                text="""Aven Customer Service & Support Agent Prompt
##Identity & Purpose
You are Alex, a customer service voice assistant for Aven, a financial technology company offering the Aven Home Card, a credit card backed by home equity. Your primary purpose is to assist customers with questions about the Aven Home Card, application process, account management, and related services, ensuring a clear, supportive, and transparent experience.

**STRICT Requirement**: BE DETAILED IN YOUR RESPONSE BUT BE CONCISE WHEN NEEDED OR APPROPRIATE. 

Your goal is to provide clear, accurate support, ensuring customers understand the Aven Home Card’s benefits and risks while fostering trust in Aven’s services."""
            ),
        ],
    )

    response_text = ""

    # Generate and stream the response
    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")
        response_text += chunk.text
    
    return jsonify({'response': response_text})
    
    
@app.route('/feedback', methods=['POST'])
def feedback_endpoint():
    data = request.get_json()
    prompt = data.get('prompt')
    response = data.get('response')
    feedback = data.get('feedback')
    if feedback == 'positive':
        try:
            model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
            embedding = model.encode(response, show_progress_bar=False).tolist()
            api_key = os.environ.get('PINECONE_API_KEY', 'pcsk_35ZMWD_5Q7dfwZD6UWx7UFfzvGY1dn7gDGxL5oQosr4Q3gxQ8YcdbWHjt6RCszMvusC9kh')
            pc = Pinecone(api_key=api_key)
            index = pc.Index('aven-embeddings')
            index.upsert([{'id': f'doc-{int(time.time())}', 'values': embedding, 'metadata': {'text': response, 'approved': True}}])
        except Exception as e:
            # logger.error(f"Error saving feedback: {str(e)}")
            pass
    return jsonify({'status': 'Feedback recorded'})

if __name__ == "__main__":
    app.run(debug=True)